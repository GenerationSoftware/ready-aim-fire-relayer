import { describe, it, expect } from 'vitest';
import { decodeCallData, decodeError } from '../src/utils/decode';

describe('Hello World worker', () => {
	it('should do something', async () => {
		const result = decodeCallData("0xdf905caf0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f7f3bea9d3c68d77c12694ddc65faea4d6a9f4c600000000000000000000000090c9b63e8d6d98ea7092747d85b262d26482ea8100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000989680000000000000000000000000000000000000000000000000000000006849cefb00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000041ba5eec0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041881a9223e56a5111291f55efe5f7feaf751263c3d28c99ea8c663e2a16a18496731362414c8a3da3957c941f6fe9d29a8a5ad243e187242e87cd464960e9663e1b00000000000000000000000000000000000000000000000000000000000000")
		expect(result).not.toBeNull();
		console.log(result)
		expect(result?.args[0].to).toBe("0x90c9B63e8d6d98ea7092747D85B262D26482ea81")
		expect(result?.args[0].gas).toBe(10000000n)

		const dataResult = decodeCallData(result?.args[0].data as `0x${string}`)
		expect(dataResult).not.toBeNull();
		expect(dataResult?.functionName).toBe("nextTurn")
	});

	it('should also do something', async () => {
		const result = decodeCallData("0xdf905caf0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f7f3bea9d3c68d77c12694ddc65faea4d6a9f4c6000000000000000000000000b796342b7882d34879c23c0e9bd64da8467a19aa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000989680000000000000000000000000000000000000000000000000000000006849e07c00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000041ba5eec000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004153d333ecff93bdad5f8ec26ea235258fc230294c64ee7a038777aebd5b3d1d03741671ce0b6616c926140cf6390563633296934d538eb00ff6ece4ec630789581b00000000000000000000000000000000000000000000000000000000000000")
		console.log(result)
	})

	it('should decode errors', async () => {
		const result = decodeError("0x4e487b710000000000000000000000000000000000000000000000000000000000000001")
		console.log(result)
	})
});
